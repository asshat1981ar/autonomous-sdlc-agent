name: Docker Build and Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
      push:
        description: 'Push to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-labels: ${{ steps.meta.outputs.labels }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Autonomous SDLC Agent
          org.opencontainers.image.description=Revolutionary autonomous software development platform
          org.opencontainers.image.vendor=Autonomous SDLC
          org.opencontainers.image.licenses=MIT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event.inputs.push != 'false' && github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom.spdx.json

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (table output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-tag }}
        format: 'table'
        output: 'trivy-table.txt'

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-${{ github.sha }}
        path: |
          trivy-results.sarif
          trivy-table.txt

  image-analysis:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Analyze image size and layers
      run: |
        # Pull the image for analysis
        docker pull ${{ needs.docker-build.outputs.image-tag }}
        
        # Analyze image size
        docker images ${{ needs.docker-build.outputs.image-tag }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
        # Analyze layers
        docker history ${{ needs.docker-build.outputs.image-tag }} --no-trunc
        
        # Generate image manifest
        docker manifest inspect ${{ needs.docker-build.outputs.image-tag }} > image-manifest.json

    - name: Container structure test
      run: |
        # Install container structure test
        curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
        chmod +x container-structure-test-linux-amd64
        sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
        
        # Run structure tests
        container-structure-test test --image ${{ needs.docker-build.outputs.image-tag }} --config tests/container-structure-test.yaml

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: image-analysis-${{ github.sha }}
        path: |
          image-manifest.json

  multi-arch-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
    - name: Set platform variables
      run: |
        PLATFORM_PAIR=${{ matrix.platform }}
        echo "PLATFORM_OS=${PLATFORM_PAIR%/*}" >> $GITHUB_ENV
        echo "PLATFORM_ARCH=${PLATFORM_PAIR#*/}" >> $GITHUB_ENV

    - name: Test image on ${{ matrix.platform }}
      run: |
        # Set up QEMU for cross-platform testing
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Test the image
        docker run --rm --platform=${{ matrix.platform }} \
          ${{ needs.docker-build.outputs.image-tag }} \
          python --version
        
        # Test application startup
        docker run --rm --platform=${{ matrix.platform }} \
          ${{ needs.docker-build.outputs.image-tag }} \
          python -c "import app; print('Application imports successfully')"

  benchmark:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Benchmark image performance
      run: |
        # Create benchmark script
        cat > benchmark.py << 'EOF'
        import time
        import subprocess
        import json
        
        def benchmark_startup_time():
            """Measure container startup time"""
            start_time = time.time()
            result = subprocess.run([
                'docker', 'run', '--rm',
                '${{ needs.docker-build.outputs.image-tag }}',
                'python', '-c', 'print("Ready")'
            ], capture_output=True, text=True)
            end_time = time.time()
            
            return {
                'startup_time': end_time - start_time,
                'exit_code': result.returncode,
                'stdout': result.stdout.strip()
            }
        
        def benchmark_memory_usage():
            """Measure container memory usage"""
            result = subprocess.run([
                'docker', 'run', '--rm', '--memory=1g',
                '${{ needs.docker-build.outputs.image-tag }}',
                'python', '-c', '''
        import psutil
        import json
        memory = psutil.virtual_memory()
        print(json.dumps({
            "total": memory.total,
            "available": memory.available,
            "percent": memory.percent,
            "used": memory.used
        }))
        '''
            ], capture_output=True, text=True)
            
            return json.loads(result.stdout.strip())
        
        # Run benchmarks
        startup_benchmark = benchmark_startup_time()
        memory_benchmark = benchmark_memory_usage()
        
        # Output results
        benchmarks = {
            'startup': startup_benchmark,
            'memory': memory_benchmark,
            'timestamp': time.time()
        }
        
        print(json.dumps(benchmarks, indent=2))
        
        # Save to file
        with open('benchmark-results.json', 'w') as f:
            json.dump(benchmarks, f, indent=2)
        EOF
        
        python benchmark.py

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results.json

  cleanup:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, image-analysis, multi-arch-test, benchmark]
    if: always() && github.event_name != 'pull_request'
    steps:
    - name: Clean up old images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ github.repository }}
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true

  build-summary:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, image-analysis, multi-arch-test, benchmark]
    if: always()
    steps:
    - name: Generate build summary
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.docker-build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: ${{ needs.docker-build.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Multi-arch Test**: ${{ needs.multi-arch-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Benchmark**: ${{ needs.benchmark.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Docker build failed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on success
      if: success() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Docker image built and pushed: ${{ needs.docker-build.outputs.image-tag }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}