name: Automated Testing Suite

on:
  schedule:
    # Run automated tests every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - performance
        - security

jobs:
  # Automated Unit Testing
  unit-tests:
    if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        node-version: ['18', '20']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Install Node dependencies
      run: npm ci

    - name: Run Python unit tests
      run: |
        python -m pytest src/ -v --cov=src --cov-report=term-missing

    - name: Run Node.js tests
      run: |
        npm test || echo "Frontend tests not configured yet"

  # Integration Testing
  integration-tests:
    if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        python test_orchestrator.py
        python test_suite.py

    - name: Test Docker build
      run: |
        docker build -t sdlc-orchestrator:test .
        docker run --rm sdlc-orchestrator:test python -c "import src.services.ai_providers_simple; print('Import successful')"

  # Performance Testing
  performance-tests:
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        python refactored_orchestrator.py
        python foundational_improvements.py

    - name: Load testing with Artillery
      run: |
        npm install -g artillery
        echo "
        config:
          target: 'http://localhost:5000'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: 'Health check load test'
            requests:
              - get:
                  url: '/api/health'
        " > load-test.yml
        # artillery run load-test.yml

  # Security Testing
  security-tests:
    if: github.event.inputs.test_type == 'security' || github.event.inputs.test_type == 'all'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety dependency check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Run npm audit
      run: |
        npm audit --audit-level moderate || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Generate Test Report
  test-report:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate test report
      run: |
        echo "# Automated Test Results - $(date)" > test-report.md
        echo "" >> test-report.md
        echo "## Test Summary" >> test-report.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Test Details" >> test-report.md
        echo "Generated on: $(date)" >> test-report.md
        echo "Commit: ${{ github.sha }}" >> test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md

  # Notification
  notify-results:
    needs: [unit-tests, integration-tests, performance-tests, security-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify test results
      run: |
        echo "Test Results Summary:"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Security Tests: ${{ needs.security-tests.result }}"
