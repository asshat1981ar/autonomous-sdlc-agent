name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety

    - name: Code formatting check (Black)
      run: black --check --diff .

    - name: Import sorting check (isort)
      run: isort --check-only --diff .

    - name: Linting (flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Type checking (mypy)
      run: mypy src/ --ignore-missing-imports

    - name: Security check (bandit)
      run: bandit -r src/ -f json -o bandit-report.json

    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml

  # A2A Framework Specific Tests
  a2a-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Test A2A Framework
      run: |
        pytest tests/test_a2a_framework.py -v

    - name: Test Knowledge System
      run: |
        pytest tests/test_a2a_knowledge_system.py -v

    - name: Test Agent Orchestration
      run: |
        pytest tests/test_integrated_orchestration.py -v

    - name: Performance benchmarks
      run: |
        python -m pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmarks
        path: benchmark.json

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: dist/

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm ci

    - name: Start application
      run: |
        python main.py &
        sleep 10

    - name: Run E2E tests
      run: |
        python tests/end_to_end_test_suite.py

    - name: Stop application
      run: |
        pkill -f "python main.py"

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # License and Compliance Check
  compliance:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check license compliance
      uses: fossa-contrib/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}

    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v1

  # Build Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-test, backend-test, a2a-tests, e2e-tests, security-scan]
    if: always()
    steps:
    - name: Build Success Notification
      if: ${{ needs.code-quality.result == 'success' && needs.frontend-test.result == 'success' && needs.backend-test.result == 'success' && needs.a2a-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "Ready for deployment to staging environment."

    - name: Build Failure Notification
      if: ${{ needs.code-quality.result == 'failure' || needs.frontend-test.result == 'failure' || needs.backend-test.result == 'failure' || needs.a2a-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "❌ CI checks failed. Please review the failed jobs."
        exit 1

    - name: Notify Slack on Success
      if: success() && github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Autonomous SDLC Agent CI passed on main branch!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Autonomous SDLC Agent CI failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}