version: '3.8'

services:
  # Backend Flask API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: sdlc-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///app/database/app.db
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
    networks:
      - sdlc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: sdlc-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - sdlc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: sdlc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sdlc-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: sdlc-postgres
    environment:
      - POSTGRES_DB=sdlc_agent
      - POSTGRES_USER=sdlc_user
      - POSTGRES_PASSWORD=sdlc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sdlc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sdlc_user -d sdlc_agent"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sdlc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sdlc-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sdlc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sdlc-network
    restart: unless-stopped

networks:
  sdlc-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: