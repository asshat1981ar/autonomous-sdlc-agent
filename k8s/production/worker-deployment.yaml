apiVersion: apps/v1
kind: Deployment
metadata:
  name: autonomous-sdlc-worker
  namespace: production
  labels:
    app: autonomous-sdlc-worker
    component: worker
    environment: production
    version: v1
spec:
  replicas: 8
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: autonomous-sdlc-worker
      environment: production
  template:
    metadata:
      labels:
        app: autonomous-sdlc-worker
        component: worker
        environment: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: autonomous-sdlc-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: autonomous-sdlc-worker
        image: ghcr.io/autonomous-sdlc/autonomous-sdlc-agent:latest
        imagePullPolicy: Always
        command: ["python", "worker.py"]
        ports:
        - containerPort: 8081
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: WORKER_TYPE
          value: "a2a-orchestrator"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: openai-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: anthropic-key
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: google-key
        - name: BLACKBOX_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-provider-keys
              key: blackbox-key
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WORKER_CONCURRENCY
          value: "4"
        - name: MAX_MEMORY_USAGE
          value: "3Gi"
        envFrom:
        - configMapRef:
            name: autonomous-sdlc-config
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import redis; r = redis.from_url('${REDIS_URL}'); r.ping()"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: worker-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /tmp
        - name: agent-workspace
          mountPath: /app/workspace
      - name: log-forwarder
        image: fluent/fluent-bit:2.1.10
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: logs
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
          readOnly: true
      volumes:
      - name: worker-config
        configMap:
          name: autonomous-sdlc-config
      - name: logs
        emptyDir: {}
      - name: temp
        emptyDir: {}
      - name: agent-workspace
        emptyDir:
          sizeLimit: 10Gi
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: c5.2xlarge
      tolerations:
      - key: "compute-intensive"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - autonomous-sdlc-worker
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - c5.2xlarge
                - c5.4xlarge
                - m5.2xlarge
                - m5.4xlarge
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autonomous-sdlc-scheduler
  namespace: production
  labels:
    app: autonomous-sdlc-scheduler
    component: scheduler
    environment: production
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: autonomous-sdlc-scheduler
      environment: production
  template:
    metadata:
      labels:
        app: autonomous-sdlc-scheduler
        component: scheduler
        environment: production
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: autonomous-sdlc-scheduler
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: autonomous-sdlc-scheduler
        image: ghcr.io/autonomous-sdlc/autonomous-sdlc-agent:latest
        imagePullPolicy: Always
        command: ["python", "scheduler.py"]
        ports:
        - containerPort: 8082
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: SCHEDULER_TYPE
          value: "master"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: autonomous-sdlc-config
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import redis; r = redis.from_url('${REDIS_URL}'); r.ping()"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: scheduler-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: scheduler-config
        configMap:
          name: autonomous-sdlc-config
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - autonomous-sdlc-scheduler
            topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: autonomous-sdlc-worker
  namespace: production
  labels:
    app: autonomous-sdlc-worker
    component: worker
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: autonomous-sdlc-worker
    environment: production
---
apiVersion: v1
kind: Service
metadata:
  name: autonomous-sdlc-scheduler
  namespace: production
  labels:
    app: autonomous-sdlc-scheduler
    component: scheduler
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 8082
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: autonomous-sdlc-scheduler
    environment: production
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autonomous-sdlc-worker
  namespace: production
  labels:
    app: autonomous-sdlc-worker
    component: worker
    environment: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/autonomous-sdlc-worker-role
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autonomous-sdlc-scheduler
  namespace: production
  labels:
    app: autonomous-sdlc-scheduler
    component: scheduler
    environment: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/autonomous-sdlc-scheduler-role
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: autonomous-sdlc-worker-hpa
  namespace: production
  labels:
    app: autonomous-sdlc-worker
    component: worker
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: autonomous-sdlc-worker
  minReplicas: 8
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  - type: Pods
    pods:
      metric:
        name: queue_length
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 20
        periodSeconds: 120
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max