# IMPORTANT: This file contains secret templates.
# Replace placeholder values with actual secrets before applying.
# Consider using external secret management like AWS Secrets Manager or HashiCorp Vault.

apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # PostgreSQL Database URL
  # Replace with actual database credentials
  url: "postgresql://autonomous_user:REPLACE_WITH_ACTUAL_PASSWORD@postgresql:5432/autonomous_sdlc"
  host: "postgresql"
  port: "5432"
  database: "autonomous_sdlc"
  username: "autonomous_user"
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # Redis URL
  # Replace with actual Redis credentials
  url: "redis://REPLACE_WITH_ACTUAL_PASSWORD@redis:6379/0"
  host: "redis"
  port: "6379"
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
  database: "0"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # Application Secret Key (used for JWT, sessions, etc.)
  # Generate with: python -c "import secrets; print(secrets.token_urlsafe(64))"
  secret-key: "REPLACE_WITH_ACTUAL_SECRET_KEY_64_CHARS_LONG"
  
  # JWT Secret
  jwt-secret: "REPLACE_WITH_ACTUAL_JWT_SECRET"
  
  # Encryption Key for sensitive data
  encryption-key: "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: ai-provider-keys
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # OpenAI API Key
  openai-key: "REPLACE_WITH_ACTUAL_OPENAI_API_KEY"
  
  # Anthropic API Key
  anthropic-key: "REPLACE_WITH_ACTUAL_ANTHROPIC_API_KEY"
  
  # Google AI API Key
  google-key: "REPLACE_WITH_ACTUAL_GOOGLE_API_KEY"
  
  # BlackBox AI API Key
  blackbox-key: "REPLACE_WITH_ACTUAL_BLACKBOX_API_KEY"
  
  # GitHub API Token
  github-token: "REPLACE_WITH_ACTUAL_GITHUB_TOKEN"
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # AWS Access Key ID
  aws-access-key-id: "REPLACE_WITH_ACTUAL_AWS_ACCESS_KEY_ID"
  
  # AWS Secret Access Key
  aws-secret-access-key: "REPLACE_WITH_ACTUAL_AWS_SECRET_ACCESS_KEY"
  
  # AWS Region
  aws-region: "us-west-2"
  
  # S3 Bucket for backups
  s3-backup-bucket: "autonomous-sdlc-backups"
---
apiVersion: v1
kind: Secret
metadata:
  name: notification-secrets
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # Slack Webhook URL
  slack-webhook-url: "REPLACE_WITH_ACTUAL_SLACK_WEBHOOK_URL"
  
  # Email SMTP Configuration
  smtp-host: "smtp.gmail.com"
  smtp-port: "587"
  smtp-username: "REPLACE_WITH_ACTUAL_SMTP_USERNAME"
  smtp-password: "REPLACE_WITH_ACTUAL_SMTP_PASSWORD"
  smtp-from-email: "noreply@autonomous-sdlc.com"
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: Opaque
stringData:
  # Grafana Admin Password
  grafana-admin-password: "REPLACE_WITH_ACTUAL_GRAFANA_PASSWORD"
  
  # Prometheus Basic Auth
  prometheus-username: "prometheus"
  prometheus-password: "REPLACE_WITH_ACTUAL_PROMETHEUS_PASSWORD"
  
  # Alertmanager Configuration
  alertmanager-webhook-url: "REPLACE_WITH_ACTUAL_ALERTMANAGER_WEBHOOK"
---
apiVersion: v1
kind: Secret
metadata:
  name: ssl-certificates
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
type: kubernetes.io/tls
stringData:
  # SSL Certificate for autonomous-sdlc.com
  # Replace with actual certificate and private key
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    REPLACE_WITH_ACTUAL_CERTIFICATE
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_ACTUAL_PRIVATE_KEY
    -----END PRIVATE KEY-----
---
# External Secrets Operator Configuration (Alternative to manual secrets)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: aws-access-key-id
          secretAccessKey:
            name: aws-credentials
            key: aws-secret-access-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials-external
  namespace: production
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-credentials-external
    creationPolicy: Owner
  data:
  - secretKey: url
    remoteRef:
      key: production/autonomous-sdlc/database
      property: url
  - secretKey: username
    remoteRef:
      key: production/autonomous-sdlc/database
      property: username
  - secretKey: password
    remoteRef:
      key: production/autonomous-sdlc/database
      property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ai-provider-keys-external
  namespace: production
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: ai-provider-keys-external
    creationPolicy: Owner
  data:
  - secretKey: openai-key
    remoteRef:
      key: production/autonomous-sdlc/ai-providers
      property: openai_api_key
  - secretKey: anthropic-key
    remoteRef:
      key: production/autonomous-sdlc/ai-providers
      property: anthropic_api_key
  - secretKey: google-key
    remoteRef:
      key: production/autonomous-sdlc/ai-providers
      property: google_api_key
  - secretKey: blackbox-key
    remoteRef:
      key: production/autonomous-sdlc/ai-providers
      property: blackbox_api_key