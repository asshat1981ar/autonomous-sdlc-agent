apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: autonomous-sdlc-ingress
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
  annotations:
    # AWS Load Balancer Controller
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: autonomous-sdlc-production
    alb.ingress.kubernetes.io/group.name: autonomous-sdlc
    
    # SSL Configuration
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:ACCOUNT_ID:certificate/CERTIFICATE_ID
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Security Headers
    alb.ingress.kubernetes.io/actions.ssl-redirect: |
      {
        "Type": "redirect",
        "RedirectConfig": {
          "Protocol": "HTTPS",
          "Port": "443",
          "StatusCode": "HTTP_301"
        }
      }
    
    # Health Check Configuration
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    
    # Performance and Security
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      routing.http2.enabled=true,
      idle_timeout.timeout_seconds=300,
      deletion_protection.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=autonomous-sdlc-alb-logs,
      access_logs.s3.prefix=production
    
    # Rate Limiting
    alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:us-west-2:ACCOUNT_ID:regional/webacl/autonomous-sdlc-production/WAF_ID
    
    # Additional Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-ancestors 'none';";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
spec:
  rules:
  - host: autonomous-sdlc.com
    http:
      paths:
      # API Routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: autonomous-sdlc-api
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: autonomous-sdlc-api
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: autonomous-sdlc-api
            port:
              number: 8080
      # Frontend Routes (catch-all)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: autonomous-sdlc-frontend
            port:
              number: 80
  
  - host: app.autonomous-sdlc.com
    http:
      paths:
      # Main Application
      - path: /
        pathType: Prefix
        backend:
          service:
            name: autonomous-sdlc-frontend
            port:
              number: 80
      # API for app subdomain
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: autonomous-sdlc-api
            port:
              number: 80
  
  - host: api.autonomous-sdlc.com
    http:
      paths:
      # Dedicated API subdomain
      - path: /
        pathType: Prefix
        backend:
          service:
            name: autonomous-sdlc-api
            port:
              number: 80
  
  tls:
  - hosts:
    - autonomous-sdlc.com
    - app.autonomous-sdlc.com
    - api.autonomous-sdlc.com
    secretName: ssl-certificates
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: autonomous-sdlc-monitoring-ingress
  namespace: production
  labels:
    app: autonomous-sdlc-monitoring
    environment: production
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: autonomous-sdlc-monitoring
    alb.ingress.kubernetes.io/group.name: autonomous-sdlc-monitoring
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:ACCOUNT_ID:certificate/CERTIFICATE_ID
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    
    # Basic Auth for monitoring endpoints
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Monitoring Authentication Required'
spec:
  rules:
  - host: monitoring.autonomous-sdlc.com
    http:
      paths:
      # Grafana
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      # Prometheus
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      # AlertManager
      - path: /alertmanager
        pathType: Prefix
        backend:
          service:
            name: alertmanager
            port:
              number: 9093
  tls:
  - hosts:
    - monitoring.autonomous-sdlc.com
    secretName: ssl-certificates
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autonomous-sdlc-network-policy
  namespace: production
  labels:
    app: autonomous-sdlc
    environment: production
spec:
  podSelector:
    matchLabels:
      app: autonomous-sdlc-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ALB
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8000
  # Allow traffic from other services in the same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow external API calls (AI providers)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autonomous-sdlc-worker-network-policy
  namespace: production
  labels:
    app: autonomous-sdlc-worker
    environment: production
spec:
  podSelector:
    matchLabels:
      app: autonomous-sdlc-worker
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow monitoring traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8081
  # Allow traffic from API pods
  - from:
    - podSelector:
        matchLabels:
          app: autonomous-sdlc-api
    ports:
    - protocol: TCP
      port: 8081
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow external API calls (AI providers, GitHub, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: autonomous-sdlc-frontend
  namespace: production
  labels:
    app: autonomous-sdlc-frontend
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: autonomous-sdlc-frontend
    environment: production