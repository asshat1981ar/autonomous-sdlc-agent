apiVersion: apps/v1
kind: Deployment
metadata:
  name: sdlc-backend
  namespace: sdlc-agent
  labels:
    app.kubernetes.io/name: autonomous-sdlc-agent
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: autonomous-sdlc-agent
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: autonomous-sdlc-agent
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ghcr.io/asshat1981ar/autonomous-sdlc-agent/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: sdlc-config
        - secretRef:
            name: sdlc-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: database-storage
          mountPath: /app/database
        - name: logs-storage
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: database-storage
        persistentVolumeClaim:
          claimName: backend-database-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: backend-logs-pvc
      imagePullSecrets:
      - name: ghcr-secret

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: sdlc-agent
  labels:
    app.kubernetes.io/name: autonomous-sdlc-agent
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: autonomous-sdlc-agent
    app.kubernetes.io/component: backend

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-database-pvc
  namespace: sdlc-agent
  labels:
    app.kubernetes.io/name: autonomous-sdlc-agent
    app.kubernetes.io/component: backend-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-logs-pvc
  namespace: sdlc-agent
  labels:
    app.kubernetes.io/name: autonomous-sdlc-agent
    app.kubernetes.io/component: backend-logs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2